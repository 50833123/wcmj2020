var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數 \n', 'tags': '', 'url': 'Develop.html'}, {'title': '開啟動態網站', 'text': 'Y:\\>cd tmp \n Y:\\tmp>cd wcmj2020 \n Y:\\tmp\\wcmj2020>cd cmsimde \n Y:\\tmp\\wcmj2020\\cmsimde>python wsgi.py \n 關閉 :\xa0CTRL+C \n \n', 'tags': '', 'url': '開啟動態網站.html'}, {'title': '把內容推上去', 'text': '\n', 'tags': '', 'url': '把內容推上去.html'}, {'title': '上課筆記', 'text': '\n \n \n', 'tags': '', 'url': '上課筆記.html'}, {'title': '繪圖程式', 'text': 'Mypaint筆刷說明.pdf \n \n \n \n', 'tags': '', 'url': '繪圖程式.html'}, {'title': '大概の上課內容', 'text': '', 'tags': '', 'url': '大概の上課內容.html'}, {'title': 'Online education', 'text': '線上直播: Youtube + Portable OBS \n 線上開會: \xa0 https://meet.google.com \n', 'tags': '', 'url': 'Online education.html'}, {'title': '讓手機可以利用電腦熱點上網', 'text': '採用\xa0 https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/ \n 將此一 USB Wifi adapter 連接電腦後, 若網路為 IPv4 協定時, 可以透過"設定 -> 網路和網際網路 -> 行動熱點", 選擇開啟並編輯"網路名稱與網路密碼"後, 讓至多 8 台手機透過熱點連線上網. \n 但是因為目前 Windows 10 並 未提供 IPv6 網路協定下的網路熱點功能 , 因此在純 IPv6 網路協定下無法使用"行動熱點"服務. \n', 'tags': '', 'url': '讓手機可以利用電腦熱點上網.html'}, {'title': '利用手機鏡頭當作 webcam', 'text': 'Android:\xa0 https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows \xa0 iPhone:\xa0 https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/ \xa0 \n \n', 'tags': '', 'url': '利用手機鏡頭當作 webcam.html'}, {'title': '上課內容', 'text': '', 'tags': '', 'url': '上課內容.html'}, {'title': 'w1-5', 'text': '', 'tags': '', 'url': 'w1-5.html'}, {'title': '使用 CMSiMDE', 'text': '\n 登入 gm 帳號後, 下載\xa0 https://drive.google.com/open?id=1SvMKQFViJ0mskt20UhSqkjzckB3noSJH \xa0 至 downloads 目錄, 然後以 7zip 解開到 C:\\wcmj2020 目錄下 \n 其中有 start.bat 與 stop.bat start.bat是開啟可攜系統 stop.bat是關閉 可攜系統 \n 登入以個人學號所建立的 github 帳號, 然後建立 wcmj2020 倉儲. \n \n 將遠端的 wcmj2020 以 git clone 取下. \n git clone \xa0 https://github.com/學號/wcmj2020.git \n \n git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0 cmsimde \n 開啟編輯 CMSiMDE網頁: \n 密碼:admin \n \n', 'tags': '', 'url': '使用 CMSiMDE.html'}, {'title': 'w6-9', 'text': '\n 學會利用 ShareX 與 OBS 拍攝螢幕操作影片 \n 重新下載 \xa0 wcmj2020_tool.7z \n 用Youtube + Portable OBS線上直播 \n 用 Google Meet 線上上課 \n 利用手機鏡頭當作 webcam: \n Android: \xa0 https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows \xa0 iPhone: \xa0 https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/ \n \n', 'tags': '', 'url': 'w6-9.html'}, {'title': 'w12-13', 'text': '\n 安裝\xa0 google-api-python-client 與 oauth2client \n \n 完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部 \n 將 client_secrets.json 轉為 credential_token.dat 的程式 \n \n 學會用leo \n 設定\xa0 add_to_blogger 和 edit_to_blogger 按鈕 \n 使用Google Blogger \n Google Blogger 中的網誌系統都有獨立 ID, 稱為 blog_id, 而網誌中的每一篇文章也有獨立 ID,  稱為 post_id \n \n', 'tags': '', 'url': 'w12-13.html'}, {'title': 'w14', 'text': '\n 安裝 Python 3.8.3 與 pip \n 安裝 Git \n 安裝 CMSiMDE 所需模組 \n \n', 'tags': '', 'url': 'w14.html'}, {'title': '新增 blogger 文章', 'text': 'w14_blogger_add_1.py \n \n \'\'\'\n用來測試 Google Blogger Python API 新增文章程式\n \npip install google-api-python-client oauth2client\n \n\'\'\'\n \nimport sys\nfrom oauth2client import client\nfrom googleapiclient import sample_tools\n \nargv = ""\n# 認證並建立服務\nservice, flags = sample_tools.init(\n  argv, \'blogger\', \'v3\', __doc__, \'./client_secrets.json\',\n  scope=\'https://www.googleapis.com/auth/blogger\')\n \ntry:\n    users = service.users()\n    # 取得使用者 profile 資料\n    user = users.get(userId=\'self\').execute()\n    print(\'網誌名稱: %s\' % user[\'displayName\'])\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    for blog in blogs[\'items\']:\n        print(blog[\'name\'], blog[\'url\'])\n    posts = service.posts()\n    # 新增網誌 post 時, 需要 blog id\n \n    body = {\n    "kind": "blogger#post",\n    "id": "123",\n    "title": "透過 Python 程式新增網誌文章1",\n    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容1"\n    }\n     \n    insert = posts.insert(blogId=\'123\', body=body)\n    posts_doc = insert.execute()\n    print(posts_doc)\n     \n    \'\'\'\n    # 更新網誌文章時的 body\n    body = {\n    "kind": "blogger#post",\n    "title": "透過 Python 程式修改網誌文章2",\n    "content": "使用 Google Blogger API 可以利用程式修改網誌文章內容. http://mde.tw/cd2019"\n    }\n     \n    update = posts.update(blogId="123", postId="456", body=body, publish=True)\n    update_doc = update.execute()\n    print(update_doc)\n    \'\'\'\nexcept(client.AccessTokenRefreshError):\n    print("error")\n \n \n', 'tags': '', 'url': '新增 blogger 文章.html'}, {'title': '編輯 Blogger 文章', 'text': 'w14_blogger_edit_1.py \n \'\'\'\n用來測試 Google Blogger Python API 編輯文章程式\n \npip install google-api-python-client oauth2client\n \n\'\'\'\n \nimport sys\nfrom oauth2client import client\nfrom googleapiclient import sample_tools\n \nargv = ""\n# 認證並建立服務\nservice, flags = sample_tools.init(\n  argv, \'blogger\', \'v3\', __doc__, \'./client_secrets.json\',\n  scope=\'https://www.googleapis.com/auth/blogger\')\n \ntry:\n    users = service.users()\n    # 取得使用者 profile 資料\n    user = users.get(userId=\'self\').execute()\n    print(\'網誌名稱: %s\' % user[\'displayName\'])\n    blogs = service.blogs()\n    # 取得使用者所建立網誌名稱\n    blogs = blogs.listByUser(userId=\'self\').execute()\n    for blog in blogs[\'items\']:\n        print(blog[\'name\'], blog[\'url\'])\n    posts = service.posts()\n    # 新增網誌 post 時, 需要 blog id\n \n    \'\'\'\n    body = {\n    "kind": "blogger#post",\n    "id": "123",\n    "title": "透過 Python 程式新增網誌文章1",\n    "content":"使用 Google Blogger API 可以利用程式新增網誌文章內容1"\n    }\n     \n    insert = posts.insert(blogId=\'123\', body=body)\n    posts_doc = insert.execute()\n    print(posts_doc)\n    \'\'\'\n \n    # 更新網誌文章時的 body\n    body = {\n    "kind": "blogger#post",\n    "title": "透過 Python 程式修改網誌文章2",\n    "content": "使用 Google Blogger API 可以利用程式修改網誌文章內容. http://mde.tw/cd2019"\n    }\n     \n    update = posts.update(blogId="123", postId="456", body=body, publish=True)\n    update_doc = update.execute()\n    print(update_doc)\n \nexcept(client.AccessTokenRefreshError):\n    print("error") \n', 'tags': '', 'url': '編輯 Blogger 文章.html'}]};